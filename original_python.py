# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CZ7b2yvjBkASO86OzILSWv6-GNGF__LI
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install colab-xterm
# %load_ext colabxterm

!pip install -U transformers torch langchain langgraph langchain_community langchain-ollama langchain_core

# Commented out IPython magic to ensure Python compatibility.
# %xterm
#curl https://ollama.ai/install.sh | sh
# ollama serve &
# ollama pull llama3.1

!ollama list

import requests
from langchain_core.tools import StructuredTool
import json

def get_met_art_by_keyword(keyword: str, max_results=5) -> list:
    # Search MET collection for artworks matching the mood/keyword
    """Search MET collection for artworks matching keywords"""
    search_url = f"https://collectionapi.metmuseum.org/public/collection/v1/search?q={keyword}"
    resp = requests.get(search_url).json()
    object_ids = resp['objectIDs'][:max_results]
    results = []
    for oid in object_ids:
        obj_url = f"https://collectionapi.metmuseum.org/public/collection/v1/objects/{oid}"
        obj = requests.get(obj_url).json()
        results.append({"title": obj['title'], "artist": obj.get('artistDisplayName', ''),
                       "image": obj.get('primaryImageSmall', '')})
    return json.dumps(results)

get_met_art_by_keyword('ceramic')

from pydantic import BaseModel, Field

class ArtKeywordInputs(BaseModel):
    keyword: str = Field(description="Keyword to search the MET collection")
    max_results: int = Field(default=5, description="Maximum number of results")


docent = StructuredTool.from_function(func=get_met_art_by_keyword,
                                      name="get_met_art_by_keyword",
                                      description="Search the MET Collection for art by keyword.",
                                      args_schema=ArtKeywordInputs)
docent.invoke('ceramic')

from langchain_ollama import ChatOllama
from langchain.agents import Tool, AgentExecutor, initialize_agent, AgentType
from langchain_core.tools import tool
from langchain.prompts import ChatPromptTemplate

system_message = """
You are an expert art curator. Given any user mood, you should:
1. List several keywords, styles, or periods associated with that mood.
2. Choose 2-3 most promising search terms.
3. Use the `get_met_art_by_keyword` tool with your chosen keywords (not just the user's literal input!).
Present the most relevant results with title and artist.
"""

tools = [docent]
llama = ChatOllama(model="mistral").bind_tools(tools)

from langgraph.prebuilt import create_react_agent
agent_executor = create_react_agent(llama, tools, prompt=system_message)

input_message = {"messages": {"role": "user", "content": "I want to see paintings that look angsty!"}}
response = agent_executor.invoke(input_message)

for message in response["messages"]:
    message.pretty_print()